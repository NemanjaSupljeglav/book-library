{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const booksSlice = createSlice({\n  name: \"author\",\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = booksSlice.actions;\nexport default booksSlice.reducer;","map":{"version":3,"sources":["/home/nemanjaaa/Desktop/book-library-1/src/redux/authorsSlice.js"],"names":["createSlice","booksSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;AACpCE,EAAAA,IAAI,EAAE,QAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAFsB;AAKpCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAVO;AAWRK,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACpCH,MAAAA,KAAK,CAACH,KAAN,IAAeM,MAAM,CAACC,OAAtB;AACD;AAbO;AAL0B,CAAD,CAA9B,C,CAsBP;;AACA,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CR,UAAU,CAACW,OAA/D;AAEP,eAAeX,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const booksSlice = createSlice({\n  name: \"author\",\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = booksSlice.actions;\n\nexport default booksSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}