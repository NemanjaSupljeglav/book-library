{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const categorySlice = createSlice({\n  name: 'category',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = categorySlice.actions;\nexport default categorySlice.reducer;","map":{"version":3,"sources":["/home/nemanjaaa/Desktop/book-library-1/src/redux/categorySlice.js"],"names":["createSlice","categorySlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,aAAa,GAAGD,WAAW,CAAC;AACrCE,EAAAA,IAAI,EAAE,UAD+B;AAErCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE;AADG,GAFuB;AAKrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AAClB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACH,KAPK;AAQNI,IAAAA,SAAS,EAAGD,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACH,KAVK;AAWNK,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AAClCH,MAAAA,KAAK,CAACH,KAAN,IAAeM,MAAM,CAACC,OAAtB;AACH;AAbK;AAL2B,CAAD,CAAjC,C,CAsBP;;AACA,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CR,aAAa,CAACW,OAAlE;AAEP,eAAeX,aAAa,CAACY,OAA7B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const categorySlice = createSlice({\n    name: 'category',\n    initialState: {\n        value: 0,\n    },\n    reducers: {\n        increment: (state) => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.value += 1\n        },\n        decrement: (state) => {\n            state.value -= 1\n        },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload\n        },\n    },\n})\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = categorySlice.actions\n\nexport default categorySlice.reducer"]},"metadata":{},"sourceType":"module"}